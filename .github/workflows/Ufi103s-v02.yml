name: Build Ufi103s-v02

on:
  workflow_dispatch
 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Clone OpenWrt Source
      run: |
        git clone https://github.com/Smartsmurf/openwrt-uz801.git
        cd openwrt-uz801
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build OpenWrt using Docker
      run: |
        docker build --cache-from=type=local,src=/tmp/.buildx-cache \
                     --cache-to=type=local,dest=/tmp/.buildx-cache-new \
                     -t openwrt-builder .
        docker run --name openwrt-build openwrt-builder

    - name: Save output firmware
      run: |
        docker cp openwrt-build:/openwrt/bin/targets ./openwrt-firmware
        docker rm openwrt-build

    - name: Extract Target Name
      id: extract_target
      run: |
        TARGET_NAME=$(ls ./openwrt-firmware | head -n 1)
        echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV
        echo "RELEASE_NAME=Release $TARGET_NAME" >> $GITHUB_ENV
        echo "ARCHIVE_NAME=openwrt-${TARGET_NAME}.tar.gz" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.TARGET_NAME }}
        release_name: ${{ env.RELEASE_NAME }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive Firmware
      run: |
        tar -czvf ${{ env.ARCHIVE_NAME }} -C ./openwrt-firmware .

    - name: Upload Firmware to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}
        asset_name: ${{ env.ARCHIVE_NAME }}
        asset_content_type: application/gzip
